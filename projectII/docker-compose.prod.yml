version: "3.4"

volumes:
  astro_node_modules:
  pgadmin_data:
  redis_data:

services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - qa-api
      - qa-ui
    ports:
      - 7800:7800

  redis:
    image: redis:latest
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    expose:
      - 6379

  qa-api:
    build:
      context: qa-api
      dockerfile: Dockerfile.prod
    image: qa-api-prod
    restart: "on-failure"
    volumes:
      - ./qa-api/:/app
      - ./app-cache/:/app-cache
    expose:
      - 7777
    depends_on:
      - database
      - flyway
    env_file:
      - project.env
    deploy:
      restart_policy:
        condition: on-failure
        delay: "5s"
        max_attempts: 5
        window: "30s"

  qa-ui:
    build:
      context: qa-ui
      dockerfile: Dockerfile.prod
    image: qa-ui-prod
    restart: "on-failure"
    volumes:
      - ./qa-ui/:/app
      - astro_node_modules:/app/node_modules
    expose:
      - 3000
    depends_on:
      - qa-api
    deploy:
      restart_policy:
        condition: on-failure
        delay: "5s"
        max_attempts: 5
        window: "30s"

  llm-api:
    build:
      context: llm-api
      dockerfile: Dockerfile.prod
    image: llm-api-prod
    restart: "on-failure"
    expose:
      - 7000
    deploy:
      restart_policy:
        condition: on-failure
        delay: "5s"
        max_attempts: 5
        window: "30s"

  database:
    container_name: database-server-dab-p2-0e13cd48-b2cf-4e4d-a707-db7d187e033e
    image: postgres:14.1
    restart: unless-stopped
    volumes:
      - ./production-database-data:/var/lib/postgresql/data
    env_file:
      - project.env

  flyway:
    image: flyway/flyway:9.11.0-alpine
    depends_on:
      - database
    volumes:
      - ./flyway/sql/:/flyway/sql
    command: -connectRetries=60 -baselineOnMigrate=true migrate
    env_file:
      - project.env

  e2e-playwright:
    entrypoint: "/bin/true"
    build: 
      context: e2e-playwright
      dockerfile: Dockerfile.prod
    image: e2e-playwright
    network_mode: host
    depends_on:
      - nginx
    volumes:
      - ./e2e-playwright/tests:/e2e-playwright/tests

  pgadmin:
    image: dpage/pgadmin4:latest
    env_file:
      - project.env
    ports:
      - "8888:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - database
    profiles:
      - pgadmin
